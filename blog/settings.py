"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import logging
import os
from pathlib import Path
from typing import List

import dj_database_url
from dotenv import load_dotenv


# 用于规范化的辅助函数
def _split_csv(env_str: str) -> List[str]:
    return [x.strip() for x in env_str.split(",") if x and x.strip()]


def is_docker_env() -> bool:
    return os.environ.get("DOCKER_ENV", "False").lower() in ("1", "true", "yes")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 载入 .env 就算没有也不会出问题
load_dotenv(os.path.join(BASE_DIR, ".env"))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG", default="False") == "True")

ALLOWED_HOSTS = _split_csv(
    os.environ.get("DJANGO_ALLOWED_HOSTS", "127.0.0.1, localhost")
)

# CDN 和代理配置
USE_X_FORWARDED_HOST = True  # 信任头部设置
USE_X_FORWARDED_PORT = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# csrf配置
CSRF_TRUSTED_ORIGINS = (
    _split_csv(os.environ.get("DJANGO_CSRF_TRUSTED_ORIGINS", ""))
    if os.environ.get("DJANGO_CSRF_TRUSTED_ORIGINS")
    else []
)

# 安全设置
SECURE_SSL_REDIRECT = not DEBUG  # 强制 HTTPS
SESSION_COOKIE_SECURE = not DEBUG  # 仅通过 HTTPS 发送 cookie, CF 的请求可能为 http
CSRF_COOKIE_SECURE = not DEBUG  # 仅通过 HTTPS 发送 CSRF cookie, 同上
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

if not DEBUG:
    SECURE_HSTS_SECONDS = 31536000  # 1年
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
else:
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",  # 验证框架和默认模型
    "django.contrib.contenttypes",  # 内容类型框架
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "ninja",
    "django_otp",
    "django_otp.plugins.otp_static",
    "django_otp.plugins.otp_totp",
    "django_otp.plugins.otp_email",  # <- if you want email capability.
    "two_factor",
    # "two_factor.plugins.phonenumber",  # <- if you want phone number capability.
    "two_factor.plugins.email",  # <- if you want email capability.
    # "two_factor.plugins.yubikey",  # <- for yubikey capability.
    "debug_toolbar",  # debug包
    "django_celery_beat",  # Celery 定时任务
    "api.apps.ApiConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # 提供静态文件
    "debug_toolbar.middleware.DebugToolbarMiddleware",  # 一个debug包的中间件 中间件的顺序很重要
]

ROOT_URLCONF = "blog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # 设置模板的搜索路径
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "blog.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


_database_url = os.environ.get("DATABASE_URL")

if _database_url:
    DATABASES = {
        "default": dj_database_url.parse(
            _database_url,
            conn_max_age=60,
        ),
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.{}".format(
                os.getenv("DATABASE_ENGINE", "sqlite3")
            ),
            "NAME": os.getenv("DATABASE_NAME", BASE_DIR / "db.sqlite3"),
            "USER": os.getenv("DATABASE_USERNAME", "user"),
            "PASSWORD": os.getenv("DATABASE_PASSWORD", "password"),
            "HOST": (
                "db"  # 写死在 docker 配置中的
                if is_docker_env()
                else os.getenv("DATABASE_HOST", "127.0.0.1")
            ),
            "PORT": os.getenv("DATABASE_PORT", 5432),
            "CONN_MAX_AGE": 60,
        }
    }

_redis_host = os.environ.get("REDIS_HOST", "localhost")
# 如果是 docker 环境强制使用 "redis" 作为 host, 这是在 docker 配置中写死了的
if is_docker_env():
    _redis_host = "redis"
_redis_port = os.environ.get("REDIS_PORT", "6379")
# 使用0号数据库
_redis_url = os.environ.get("REDIS_URL", f"redis://{_redis_host}:{_redis_port}/0")

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": _redis_url,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
        },
        "KEY_PREFIX": "django",  # eg. django:1:health_check
    },
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"  # 设置session使用缓存
SESSION_CACHE_ALIAS = "default"
CACHE_TTL = 60 * 10  # 缓存超时时间

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# python manage.py collectstatic --noinput 收集静态文件

# whitenoise的压缩和缓存支持
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# debug包所需的内部ip列表
INTERNAL_IPS = [
    "127.0.0.1",
]

API_KEY = os.getenv("API_KEY")
if API_KEY is None:
    logging.warning("API_KEY is not set in environment variables.")

RESEND_API_KEY = os.getenv("RESEND_API_KEY")

LOGIN_URL = "two_factor:login"

# this one is optional
LOGIN_REDIRECT_URL = "two_factor:profile"

# email backend
EMAIL_BACKEND = "api.backends.ResendEmailBackend"  # 从 __init__.py 中获取
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")
SERVER_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")  # Address sent to website administrator
ADMINS = [("admin", os.getenv("ADMIN_EMAIL"))]

# logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": os.environ.get("DJANGO_LOGLEVEL", "INFO").upper(),
    },
}

# Celery configuration
CELERY_BROKER_URL = _redis_url
CELERY_RESULT_BACKEND = _redis_url
CELERY_TIMEZONE = "Asia/Shanghai"
# Celery scheduled tasks use database storage, if not it django_celery_beat will not work
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# img bed
R2_ACCESS_KEY_ID = os.getenv("R2_ACCESS_KEY_ID")
R2_SECRET_ACCESS_KEY = os.getenv("R2_SECRET_ACCESS_KEY")

# vector search
MODEL_NAME = os.environ.get("MODEL_NAME")
SENTENCE_TRANSFORMERS_HOME = os.environ.get("SENTENCE_TRANSFORMERS_HOME")
# supervisord may use root permissions
# PermissionError: [Errno 13] Permission denied: '/root/.cache/huggingface/token'
if SENTENCE_TRANSFORMERS_HOME:
    os.environ["HF_HOME"] = SENTENCE_TRANSFORMERS_HOME
